name: SonarCloud Analysis and Deployment

on:
  push:
    branches:
      - master

jobs:
  build_and_deploy:
    name: Build, Analyze, and Deploy
    runs-on: windows-latest

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache SonarCloud packages
        uses: actions/cache@v2
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v2
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p .\.sonar\scanner
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Build and analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"amit7080_IMS" /o:"amit7080" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Deploy after successful build
        if: success()
        run: |
          $publishData = @"
          <?xml version="1.0" encoding="utf-8"?>
          <publishData>
            <publishProfile
              profileName="amitkumar70-001-site1 - Web Deploy"
              publishMethod="MSDeploy"
              publishUrl="https://win8140.site4now.net:8172/msdeploy.axd?site=amitkumar70-001-site1"
              msdeploySite="amitkumar70-001-site1"
              userName="amitkumar70-001"
              userPWD=""
              destinationAppUrl="http://amitkumar70-001-site1.ftempurl.com/"
              SQLServerDBConnectionString=""
              mySQLDBConnectionString=""
            />
            <publishProfile
              profileName="amitkumar70-001-site1 - FTP"
              publishMethod="FTP"
              publishUrl="ftp://win8140.site4now.net:21/ims"
              ftpPassiveMode="True"
              userName="amitkumar70-001"
              userPWD=""
              destinationAppUrl="http://amitkumar70-001-site1.ftempurl.com/"
              SQLServerDBConnectionString=""
              mySQLDBConnectionString=""
            />
          </publishData>
          "@

          $publishData | Out-File -FilePath publishData.xml

          # Parse the XML to extract the FTP publish profile
          $xml = [xml](Get-Content publishData.xml)
          $ftpProfile = $xml.publishData.publishProfile | Where-Object { $_.publishMethod -eq "FTP" }

          # Deploy using FTP
          $ftpUrl = $ftpProfile.publishUrl
          $ftpUsername = $ftpProfile.userName
          $ftpPassword = $ftpProfile.userPWD

          # Use FTP commands to upload files
          # Example commands for deployment
          # You may need to install FTP client if not already available
          echo "Uploading files to FTP server..."
          ftp -i -n $ftpUrl <<EOF
          user $ftpUsername $ftpPassword
          put -r . # Upload all files recursively
          quit
          EOF
